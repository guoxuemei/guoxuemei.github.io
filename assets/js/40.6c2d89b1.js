(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{323:function(t,s,a){"use strict";a.r(s);var e=a(10),r=Object(e.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"多人项目代码格式化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#多人项目代码格式化"}},[t._v("#")]),t._v(" 多人项目代码格式化")]),t._v(" "),s("h2",{attrs:{id:"husky-与-lint-staged-和prettier-的使用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#husky-与-lint-staged-和prettier-的使用"}},[t._v("#")]),t._v(" husky 与 lint-staged 和prettier 的使用")]),t._v(" "),s("p",[t._v("多人开发时,不同人使用的编辑器缩进不同,代码风格不一致等等,导致提交的代码错乱无序,在有代码对比的场景下,非常影响对比视觉")]),t._v(" "),s("p",[t._v("可以使用git hooks 提供的pre-commit,在提交前,把暂存区的内容进行format再提交,这样仓库的代码,就会保持同一个风格\n而git默认的hooks存在于.git/hooks文件夹,这个文件夹是不进行版本控制的,在本地生效的pre-commit无法提交被别的同事同步到\n因此使用husky工具,该库核心是修改git的core.hooksPath为项目中的.husky/_,而这个目录,每个同事都可以通过执行"),s("code",[t._v("husky")]),t._v("命令初始化得到")]),t._v(" "),s("p",[t._v("在pre-commit中,就可以执行format相关指令了")]),t._v(" "),s("p",[t._v("prettier只能格式化本地代码,无法格式化已经存入暂存区的代码,lint-staged就可以解决这个问题\n核心是:lint-staged可以针对暂存区的代码,使用特定指令格式化,然后把格式化以后的代码,提交至git,并且可以把格式化后的代码放回本地工作区,这样本地的该文件,也保持统一风格了")]),t._v(" "),s("blockquote",[s("p",[t._v("1 安装开发依赖")])]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("npm")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-D")]),t._v(" husky lint-staged prettier\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 完成后 执行如下命令")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#1. 修改git的core.hooksPath")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#2. 添加一个pre-commit hook文件")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('#3. package.json 的script中,会多一条 "prepare": "husky"')]),t._v("\nnpx husky init\n")])])]),s("p",[s("img",{attrs:{src:"/imgs/hooksPath.png",alt:"husky初始前后,core.hooksPath变化"}}),t._v("\n这个图里使用的是"),s("code",[t._v("npx husky")]),t._v(", 是初始化"),s("code",[t._v(".husky/_")]),t._v("目录的, "),s("code",[t._v("npx husky init")]),t._v(" 除了初始化这个目录,还会在该目录同级下,自动创建一个"),s("code",[t._v("pre-commit")]),t._v(",也就是下面的第四步操作")]),t._v(" "),s("blockquote",[s("p",[t._v("2\n项目根目录创建prettier配置文件,简单设置了几个常用规则,我用的"),s("code",[t._v(".prettierrc.js")]),t._v("格式,方便写注释")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("module"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("exports "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 语句末尾不加分号")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("semi")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 不使用tab缩进(但是tab键行为会替换为空格缩进,缩进数为tabWidth)")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("useTabs")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("tabWidth")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 集合尾部逗号[1, 2, 3, 4,]=>[1, 2, 3, 4]")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("trailingComma")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'none'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 字符串使用单引号还是双引号,这里是使用单引号")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("singleQuote")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("ul",[s("li",[t._v("prettier也可以设置忽略文件"),s("code",[t._v(".pretierignore")]),t._v(",用于忽略不需要格式化的文件/文件夹,如果项目有"),s("code",[t._v(".gitignore")]),t._v(",也会一并读取该文件配置内容")])]),t._v(" "),s("blockquote",[s("p",[t._v("3\n项目根目录新建lint-staged配置文件,添加格式化规则 "),s("code",[t._v(".lintstagedrc.json")])])]),t._v(" "),s("div",{staticClass:"language-json extra-class"},[s("pre",{pre:!0,attrs:{class:"language-json"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"*.{js,ts,vue}"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"prettier --write"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"*.{css,scss,less}"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"prettier --write"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"*.{html,htm}"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"prettier --write"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("ul",[s("li",[t._v("注意: 这里的ts,vue,scss等前面,不要加空格,否则匹配不到该格式")])]),t._v(" "),s("blockquote",[s("p",[t._v("4\n"),s("code",[t._v(".husky")]),t._v("目录下,新建"),s("code",[t._v("pre-commit")]),t._v("文件,添加命令"),s("code",[t._v("npm run lint:staged")]),t._v(",该文件需要上传git,用于其他同事拉取")])]),t._v(" "),s("p",[t._v("package.json 中配置这么两条指令")]),t._v(" "),s("div",{staticClass:"language-json extra-class"},[s("pre",{pre:!0,attrs:{class:"language-json"}},[s("code",[s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"scripts"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"prepare"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"husky"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"lint:staged"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"lint-staged"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n")])])]),s("p",[t._v("其中,prepare是执行完"),s("code",[t._v("npx husky init")]),t._v("以后,自动给添加的,如果没有就手动添加一下")]),t._v(" "),s("p",[t._v("prepare是个特殊的npm钩子,在"),s("code",[t._v("npm install")]),t._v("(不带参数)命令执行完以后自动执行")]),t._v(" "),s("p",[t._v("同事拉取到代码以后,如果不执行"),s("code",[t._v("npm install")]),t._v(",那么手动执行一下prepare指令,就可以正常使用了")]),t._v(" "),s("h3",{attrs:{id:"总流程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#总流程"}},[t._v("#")]),t._v(" 总流程")]),t._v(" "),s("p",[s("img",{attrs:{src:"/imgs/pre-commit%E8%A7%A6%E5%8F%91%E6%B5%81%E7%A8%8B.png",alt:"执行流程图"}}),t._v(" "),s("img",{attrs:{src:"/imgs/main.js%E6%8F%90%E4%BA%A4%E5%89%8D%E5%B7%A5%E4%BD%9C%E5%8C%BA.png",alt:"main.js提交前工作区"}}),t._v(" "),s("img",{attrs:{src:"/imgs/main.js%E6%9A%82%E5%AD%98%E5%8C%BA%E5%86%85%E5%AE%B9.png",alt:"main.js暂存区内容"}}),t._v(" "),s("img",{attrs:{src:"/imgs/main.js%E6%8F%90%E4%BA%A4%E5%90%8E%E5%B7%A5%E4%BD%9C%E5%8C%BA.png",alt:"main.js提交后工作区"}}),t._v(" "),s("img",{attrs:{src:"/imgs/main.js%E6%8F%90%E4%BA%A4%E5%90%8Egit%E5%86%85%E5%AE%B9.png",alt:"main.js提交后git内容"}}),t._v(" "),s("img",{attrs:{src:"/imgs/lint-staged%E6%97%A5%E5%BF%97.png",alt:"lint-staged日志"}})])])}),[],!1,null,null,null);s.default=r.exports}}]);